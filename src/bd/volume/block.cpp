#include <bd/volume/block.h>

#include <bd/log/gl_log.h>
#include <bd/util/util.h>

#include <glm/glm.hpp>
#include <glm/gtx/string_cast.hpp>

#include <sstream>


namespace bd
{
///////////////////////////////////////////////////////////////////////////////
//      Static   Members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//     Instance  Methods
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
Block::Block(const glm::u64vec3& ijk, const FileBlock &fb)
  : m_fb{ fb }
  , m_ijk{ ijk }
  , m_tex{ bd::Texture::Target::Tex3D }
{
}


///////////////////////////////////////////////////////////////////////////////
Block::~Block()
{
}


///////////////////////////////////////////////////////////////////////////////
const glm::u64vec3&
Block::ijk() const
{
  return m_ijk;
}


///////////////////////////////////////////////////////////////////////////////
void
Block::ijk(const glm::u64vec3& ijk)
{
  m_ijk = ijk;
}


///////////////////////////////////////////////////////////////////////////////
bool
Block::empty() const
{
  return m_empty;
}

void
Block::empty(bool b)
{
  m_empty = b;
}


glm::vec3
Block::origin() const
{
  return { m_fb.world_oigin[0], m_fb.world_oigin[1], m_fb.world_oigin[2] };
}


///////////////////////////////////////////////////////////////////////////////
double
Block::avg() const
{
  return m_fb.avg_val;
}


///////////////////////////////////////////////////////////////////////////////
bd::Texture&
Block::texture()
{
  return m_tex;
}


///////////////////////////////////////////////////////////////////////////////
std::string
Block::to_string() const
{
  std::stringstream ss;
  ss << "{ ijk: ("
      << m_ijk.x << ',' << m_ijk.y << ',' << m_ijk.z << "),\n"
      "Origin: ("
      << m_fb.world_oigin[0] << ',' << m_fb.world_oigin[1] << ','
      << m_fb.world_oigin[2] << "),\n"
      "Empty: "
      << (empty() ? "True" : "False") << "\n"
      "Texture: "
      << m_tex << " }";

  return ss.str();
}

std::ostream&
operator<<(std::ostream& os, const Block& b)
{
  return os << b.to_string();
}
} // namespace bd


